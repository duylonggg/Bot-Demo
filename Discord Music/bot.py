import discord
import os
import yt_dlp
import asyncio
import json
from discord.ext import commands
from dotenv import load_dotenv

############################################################################################################
#                                                                                                          #
#                                                  SET UP                                                  #
#                                                                                                          #
############################################################################################################

load_dotenv()
TOKEN = os.getenv('BOT_TOKEN')

os.environ["PATH"] += os.pathsep + r"D:\Bot\Discord\Music\ffmpeg-7.1-full_build\bin"

intents = discord.Intents.default()
intents.message_content = True
bot = commands.Bot(command_prefix="?", intents=intents)

voice_clients = {}
queues = {}

yt_dl_options = {
    "format": "bestaudio[ext=m4a]/bestaudio/best",
    "noplaylist": False
}
ytdl = yt_dlp.YoutubeDL(yt_dl_options)

ffmpeg_options = {'before_options': '-reconnect 1 -reconnect_streamed 1 -reconnect_delay_max 5','options': '-vn -filter:a "volume=0.25"'}

def load_songs():
    try:
        with open("songs.json", "r", encoding="utf-8") as file:
            return json.load(file)
    except (FileNotFoundError, json.JSONDecodeError):
        return {}
    
def save_songs():
    """L∆∞u danh s√°ch b√†i h√°t v√†o songs.json"""
    with open("songs.json", "w", encoding="utf-8") as file:
        json.dump(songs, file, ensure_ascii=False, indent=4)

songs = load_songs()

############################################################################################################
#                                                                                                          #
#                                                PH√ÅT NH·∫†C                                                 #
#                                                                                                          # 
############################################################################################################

@bot.event
async def on_ready():
    print(f'{bot.user} is now jamming!')

async def play_next(ctx):
    """Ph√°t b√†i h√°t ti·∫øp theo trong queue n·∫øu c√≥."""
    guild_id = ctx.guild.id
    if guild_id in queues and queues[guild_id]: 
        next_url = queues[guild_id].pop(0)
        await play(ctx, next_url, from_queue=True)
        
@bot.command(name="list_songs")
async def list_songs(ctx):
    """Hi·ªÉn th·ªã danh s√°ch b√†i h√°t c√≥ s·∫µn."""
    if not songs:
        await ctx.send("üìÇ Kh√¥ng c√≥ b√†i h√°t n√†o trong danh s√°ch!")
        return

    song_list = "\n".join([f"{i+1}. {name}" for i, name in enumerate(songs.keys())])
    await ctx.send(f"# üé∂ Danh s√°ch b√†i h√°t:\n{song_list}")
    
@bot.command(name="add_song")
async def add_song(ctx, name: str, url: str):
    """Th√™m b√†i h√°t v√†o danh s√°ch"""
    if name in songs:
        await ctx.send(f"‚ùå B√†i h√°t **{name}** ƒë√£ c√≥ trong danh s√°ch!")
        return

    songs[name] = url
    save_songs()
    await ctx.send(f"‚úÖ ƒê√£ th√™m b√†i h√°t **{name}** v√†o danh s√°ch!")
    
@bot.command(name="delete_song")
async def delete_song(ctx, name: str):
    """X√≥a b√†i h√°t kh·ªèi danh s√°ch"""
    if name not in songs:
        await ctx.send(f"‚ùå Kh√¥ng t√¨m th·∫•y b√†i h√°t **{name}** trong danh s√°ch!")
        return

    del songs[name]
    save_songs()
    await ctx.send(f"üóë ƒê√£ x√≥a b√†i h√°t **{name}** kh·ªèi danh s√°ch!")

@bot.command(name="play")
async def play(ctx, url: str, from_queue=False):
    """Ph√°t nh·∫°c t·ª´ YouTube."""
    try:
        voice_client = ctx.guild.voice_client
        if not voice_client or not voice_client.is_connected():
            voice_client = await ctx.author.voice.channel.connect()
            voice_clients[ctx.guild.id] = voice_client

        if voice_client.is_playing() and not from_queue:
            if ctx.guild.id not in queues:
                queues[ctx.guild.id] = []
            queues[ctx.guild.id].append(url)
            await ctx.send("üé∂ ƒê√£ th√™m v√†o h√†ng ƒë·ª£i!")
            return

        loop = asyncio.get_event_loop()
        data = await loop.run_in_executor(None, lambda: ytdl.extract_info(url, download=False))
        
        if "entries" in data: 
            for entry in data["entries"]:
                queues.setdefault(ctx.guild.id, []).append(entry["url"])

            await ctx.send(f"üìú ƒê√£ th√™m {len(data['entries'])} b√†i h√°t t·ª´ danh s√°ch ph√°t v√†o h√†ng ƒë·ª£i!")
            if not voice_client.is_playing():
                await play_next(ctx)
        else:
            song = data['url']
            player = discord.FFmpegOpusAudio(song, **ffmpeg_options)

            voice_clients[ctx.guild.id].play(player, after=lambda _: bot.loop.create_task(play_next(ctx)))
            await ctx.send(f"üéµ ƒêang ph√°t: {data['title']}")

    except Exception as e:
        print(e)
        await ctx.send("‚ùå Kh√¥ng th·ªÉ ph√°t nh·∫°c!")
        
@bot.command(name="play_name")
async def play_name(ctx, *song_name):
    """Ph√°t nh·∫°c theo t√™n t·ª´ danh s√°ch c√≥ s·∫µn."""
    song_name = " ".join(song_name)  
    if song_name in songs:
        await play(ctx, songs[song_name])
    else:
        await ctx.send("‚ùå Kh√¥ng t√¨m th·∫•y b√†i h√°t trong danh s√°ch!")

@bot.command(name="pause")
async def pause(ctx):
    """T·∫°m d·ª´ng nh·∫°c."""
    voice_client = ctx.guild.voice_client
    if voice_client and voice_client.is_playing():
        voice_client.pause()
        await ctx.send("‚è∏ Nh·∫°c ƒë√£ b·ªã t·∫°m d·ª´ng.")

@bot.command(name="resume")
async def resume(ctx):
    """Ti·∫øp t·ª•c ph√°t nh·∫°c."""
    voice_client = ctx.guild.voice_client
    if voice_client and voice_client.is_paused():
        voice_client.resume()
        await ctx.send("‚ñ∂ Ti·∫øp t·ª•c ph√°t nh·∫°c.")

@bot.command(name="stop")
async def stop(ctx):
    """D·ª´ng nh·∫°c v√† ng·∫Øt k·∫øt n·ªëi."""
    guild_id = ctx.guild.id
    if guild_id in queues:
        queues[guild_id].clear()
    voice_client = ctx.guild.voice_client
    if voice_client and voice_client.is_connected():
        voice_client.stop()
        await voice_client.disconnect()
        await ctx.send("‚èπ ƒê√£ d·ª´ng nh·∫°c v√† tho√°t kh·ªèi k√™nh voice.")

@bot.command(name="skip")
async def skip(ctx):
    """B·ªè qua b√†i h√°t hi·ªán t·∫°i v√† ph√°t b√†i ti·∫øp theo."""
    voice_client = ctx.guild.voice_client
    if voice_client and voice_client.is_playing():
        voice_client.stop()  
        await play_next(ctx) 
        await ctx.send("‚è≠ ƒê√£ b·ªè qua b√†i h√°t!")
    else:
        await ctx.send("‚ùå Kh√¥ng c√≥ b√†i h√°t n√†o ƒëang ph√°t.")

@bot.command(name="help_me")
async def help_me(ctx):
    """Hi·ªÉn th·ªã danh s√°ch l·ªánh hi·ªán c√≥."""
    commands_list = (
        "# üéµ Danh s√°ch l·ªánh:\n"
        "?list_songs - In ra danh s√°ch c√°c b√†i nh·∫°c ƒë√£ l∆∞u\n"
        "?add_song \"<name>\" \"<url>\" - L∆∞u b√†i h√°t m·ªõi v√†o danh s√°ch\n"
        "?delete_song \"<name>\" - X√≥a m·ªôt b√†i h√°t trong danh s√°ch\n"
        "?play <url> - Ph√°t nh·∫°c t·ª´ YouTube\n"
        "?play_name <t√™n b√†i> - Ph√°t nh·∫°c theo t√™n t·ª´ danh s√°ch c√≥ s·∫µn\n"
        "?pause - T·∫°m d·ª´ng nh·∫°c\n"
        "?resume - Ti·∫øp t·ª•c ph√°t nh·∫°c\n"
        "?stop - D·ª´ng nh·∫°c v√† tho√°t kh·ªèi k√™nh voice\n"
        "?skip - B·ªè qua b√†i h√°t hi·ªán t·∫°i nh∆∞ng ph√°t l·∫°i sau\n"
        "?help_me - Hi·ªÉn th·ªã danh s√°ch l·ªánh"
    )
    await ctx.send(commands_list)

############################################################################################################
#                                                                                                          #
#                                                 RUN BOT                                                  #
#                                                                                                          #
############################################################################################################

bot.run(TOKEN)
